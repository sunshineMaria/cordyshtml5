<project default="dist" basedir=".">

	<!--
	==============================
	Include properties
	==============================
	-->
	<property environment="env" />
	<property file="${root.dir}/build.properties" />
	<property file="${root.dir}/build.number" />
	<property file="${root.dir}/default.properties" />
	<property file="build.properties" />
	<import file="${common-targets.xml}" />
	<import file="${main-common-targets.xml}" />
	<import file="${cap-common-target.xml}" />

	<!-- Define JSMin -->
		<path id="jsmin.classpath">
			<pathelement location="${component.buildsdk.jar}/jsmin.0.2.4.jar" />
		</path>
		
	<taskdef name="jsmin" classname="net.matthaynes.jsmin.JSMin_Task" classpathref="jsmin.classpath"/>

	
	<!--
	=============================
	Default target.
	=============================
	-->
	<target name="dist" 
		description="Builds the component completely"
		depends="clean, init, copy_web, concat_plugins, minify_sdk, updatewebfilesystem, createcap">
	</target>


	<!--
	=============================
	Clean this component related 
	build folders and target files
	=============================
	-->
	<target name="clean" unless="skip.clean">
		<delete dir="${build.component.dir}" failonerror="false" />
	</target>

	<!--
	=============================
	Initialize the directories
	=============================
	-->
	<target name="init">
		<mkdir dir="${build.web}" />
	</target>
	
	<!--Target for copying web resources to build folder -->
	<target name="copy_web" description="Copies web resources to the build folder"
			depends="init">
		<copy todir="${build.web}">
			<fileset dir="${src.web}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>
	
	
	<target name="concat_plugins" description="Concats all the plugins into the sdk file"
				depends="copy_web">
		<echo message="Concating all plugins into ${build.sdk.debug.filename}" />
		<replaceregexp byline="true" file="${build.sdk.release.filename}" match="^loadScript\([^)]*\);" replace="" />
		<concat destfile="${build.sdk.debug.filename}"
			 fixlastline="yes" encoding="UTF-8" outputencoding="UTF-8">
			<fileset file="${build.sdk.release.filename}" />
			<fileset file="${build.web}/html5/jquery/jxon.js" />
			<fileset dir="${build.web.plugins}" includes="cordys.ajax.js,cordys.model.js,cordys.process.js,cordys.workflow.js,cordys.case.js" />
			<filterchain>	
				<deletecharacters chars="&#xFEFF;" />
  			</filterchain>
  		</concat>
	</target>
	
	<target name="minify_sdk" description="Minify the sdk file"
					depends="concat_plugins">
		<echo message="Minifying SDK ${build.sdk.debug.filename}" />
		<jsmin srcfile="${build.sdk.debug.filename}" suffix="true" copyright="(c) 2012 cordys.com" />
		<echo message="Renaming ${build.sdk.min.filename} to ${build.sdk.release.filename}" />
		<rename src="${build.sdk.min.filename}" dest="${build.sdk.release.filename}"/>
	</target>
	 
		
	<target name="updatewebfilesystem" description="Updating the webfilesystem.xml based on the addition or deletion of files">
		<echo message="updating the webfilesystem.xml ${src.capcontent.web.filesystem.xml}'" />
		<echo message="updating from ${build.web}" />
	   	
	   	<trycatch property="updatefilesystemerrormessage" reference="updatewebfilesystem">
		  <try>
		    <updatefilesystemxml inputxmlpath="${src.capcontent.web.filesystem.xml}" buildlocation="${build.web}" />
		  </try>
		
		  <catch>
		    	<if>
			    <contains string="${updatefilesystemerrormessage}" substring="Source file system is updated." />
			    <then>
			        <echo>Source File System was updated after the last generation of the file system artifact definition (webfilesystem.xml)</echo>
			    </then>
			    <else>
			        <fail>
			        	${updatefilesystemerrormessage}
			        </fail>
			        <echo>Error in Updating the Web File System with the Web File System + ${updatefilesystemerrormessage}.</echo>
			    </else>
			</if>
		  </catch>
		</trycatch>
	</target>
	
	<!--
	=============================
	Build the CAP
	=============================
	-->
	<target name="createcap">
		<echo message="Building distributable to '${cap.filename}'" />
		<createcap
			guid="${cap.guid}" 
			name="${cap.name}" 
			vendor="${cap.owner}" 
			version="${cap.version}"
			build="${build.number}"
			buildoutputdir="${build.applications}">	
			<description language="en_US" text="${cap.description}" />
			<description language="ja_jp" text="${cap.description}" />
			<capcontent source="${src.capcontent}/webfilesystem.xml" />
		</createcap>				
   	</target>
</project>
